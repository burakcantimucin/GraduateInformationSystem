<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AH//4AB//+AAf//wAD//8AA///AgP//wMH8=
</value>
  </data>
</root>